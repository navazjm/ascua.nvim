-- Copyright (c) 2025 Ascua.nvim
-- MIT license, see LICENSE for more details.

local hl = vim.api.nvim_set_hl
local theme = {}

theme.set_highlights = function(opts)
    local c = require("ascua.colors").get_colors()

    -- editor basics
    hl(0, "normal", { fg = c.fg_primary, bg = c.bg_primary })
    hl(0, "colorcolumn", { fg = "none", bg = c.bg_secondary })
    hl(0, "cursor", { fg = c.bg_primary, bg = c.fg_cursor })
    hl(0, "cursorline", { bg = c.light_gray })
    hl(0, "cursorcolumn", { fg = "none", bg = c.bg_secondary })
    hl(0, "directory", { fg = c.blue, bg = c.bg_primary })
    hl(0, "diffadd", { fg = "none", bg = c.green })
    hl(0, "diffchange", { fg = "none", bg = c.orange })
    hl(0, "diffdelete", { fg = "none", bg = c.error_red })
    hl(0, "difftext", { fg = "none", bg = c.blue })
    hl(0, "endofbuffer", { fg = c.bg_primary, bg = "none" })
    hl(0, "errormsg", { fg = c.error_red, bg = c.bg_primary })
    hl(0, "vertsplit", { fg = c.black, bg = c.bg_primary })
    hl(0, "winseparator", { link = "vertsplit" })
    hl(0, "folded", { fg = "none", bg = c.light_gray })
    hl(0, "foldcolumn", { fg = c.gray, bg = c.bg_primary })
    hl(0, "signcolumn", { fg = "none", bg = c.bg_primary })
    hl(0, "linenr", { fg = c.gray, bg = c.bg_primary })
    hl(0, "cursorlinenr", { fg = c.white, bg = c.bg_primary })
    hl(0, "matchparen", { fg = c.fg_bracket, bg = "none", bold = opts.bold_styles })
    hl(0, "modemsg", { fg = c.fg_primary, bg = c.bg_secondary })
    hl(0, "moremsg", { fg = c.fg_primary, bg = c.bg_secondary })
    hl(0, "nontext", { fg = c.gray, bg = "none" })
    hl(0, "pmenu", { fg = c.white, bg = c.bg_secondary })
    hl(0, "pmenusel", { fg = c.white, bg = c.bg_active_tab })
    hl(0, "pmenusbar", { fg = "none", bg = c.light_gray })
    hl(0, "pmenuthumb", { fg = "none", bg = c.white })
    hl(0, "question", { fg = c.blue, bg = c.bg_primary })
    hl(0, "search", { fg = c.black, bg = c.yellow })
    hl(0, "incsearch", { fg = c.black, bg = c.magenta})
    hl(0, "cursearch", { fg = c.black, bg = c.magenta})
    hl(0, "specialkey", { fg = c.blue, bg = "none" })
    hl(0, "statusline", { fg = c.fg_status, bg = c.bg_secondary })
    hl(0, "statuslinenc", { fg = c.fg_status, bg = c.bg_primary })
    hl(0, "tabline", { fg = c.fg_inactive_tab, bg = c.bg_secondary })
    hl(0, "tablinefill", { fg = c.fg_primary, bg = c.bg_secondary })
    hl(0, "tablinesel", { fg = c.tab_border, bg = c.bg_active_tab })
    hl(0, "title", { fg = "none", bg = "none", bold = opts.bold_styles })
    hl(0, "visual", { fg = "none", bg = c.light_gray })
    hl(0, "visualnos", { fg = "none", bg = c.light_gray })
    hl(0, "warningmsg", { fg = c.warning_yellow, bg = c.bg_primary, bold = opts.bold_styles })
    hl(0, "wildmenu", { fg = "none", bg = c.light_gray })

    -- syntax highlighting
    hl(0, "comment", { fg = c.green, bg = "none", italic = opts.italic_comments })
    hl(0, "constant", { fg = c.fg_primary, bg = "none" })
    hl(0, "string", { fg = c.red, bg = "none" })
    hl(0, "character", { fg = c.error_red, bg = "none" })
    hl(0, "number", { fg = c.blue, bg = "none" })
    hl(0, "boolean", { fg = c.yellow, bg = "none" })
    hl(0, "float", { fg = c.blue, bg = "none" })
    hl(0, "identifier", { fg = c.fg_primary, bg = "none" })
    hl(0, "function", { fg = c.fg_primary, bg = "none", bold = opts.bold_styles })
    hl(0, "statement", { fg = c.yellow, bg = "none", bold = opts.bold_styles })
    hl(0, "conditional", { fg = c.yellow, bg = "none", bold = opts.bold_styles })
    hl(0, "repeat", { fg = c.yellow, bg = "none", bold = opts.bold_styles })
    hl(0, "label", { fg = c.yellow, bg = "none", bold = opts.bold_styles })
    hl(0, "operator", { fg = c.fg_bracket, bg = "none", bold = opts.bold_styles })
    hl(0, "keyword", { fg = c.yellow, bg = "none", bold = opts.bold_styles })
    hl(0, "exception", { fg = c.yellow, bg = "none", bold = opts.bold_styles })
    hl(0, "preproc", { fg = c.yellow, bg = "none" })
    hl(0, "include", { fg = c.yellow, bg = "none", bold = opts.bold_styles })
    hl(0, "define", { fg = c.mint, bg = "none", bold = opts.bold_styles })
    hl(0, "macro", { fg = c.yellow, bg = "none", bold = opts.bold_styles })
    hl(0, "type", { fg = c.mint, bg = "none", bold = opts.bold_styles })
    hl(0, "storageclass", { fg = c.mint, bg = "none", bold = opts.bold_styles })
    hl(0, "structure", { fg = c.mint, bg = "none", bold = opts.bold_styles })
    hl(0, "typedef", { fg = c.mint, bg = "none", bold = opts.bold_styles })
    hl(0, "special", { fg = c.red, bg = "none" })
    hl(0, "specialchar", { fg = c.red, bg = "none" })
    hl(0, "tag", { fg = c.fg_primary, bg = "none" })
    hl(0, "delimiter", { fg = c.fg_bracket, bg = "none", bold = opts.bold_styles })
    hl(0, "specialcomment", { fg = c.green, bg = "none" })
    hl(0, "debug", { fg = c.fg_primary, bg = "none" })
    hl(0, "underlined", { fg = "none", bg = "none", underline = true })
    hl(0, "conceal", { fg = c.fg_primary, bg = c.bg_primary })
    hl(0, "ignore", { fg = c.fg_primary, bg = "none" })
    hl(0, "error", { fg = c.error_red, bg = c.bg_primary, undercurl = true, sp = c.error_red })
    hl(0, "todo", { fg = c.orange, bg = c.bg_primary, bold = opts.bold_styles })
    hl(0, "spellbad", { fg = "none", undercurl = true, sp = c.error_red })
    hl(0, "spellcap", { fg = "none", undercurl = true, sp = c.warning_yellow })
    hl(0, "spellrare", { fg = "none", undercurl = true, sp = c.blue })
    hl(0, "spelllocal", { fg = "none", undercurl = true, sp = c.blue })
    hl(0, "whitespace", { fg = c.gray })
    hl(0, "normalfloat", { bg = c.bg_secondary })
    hl(0, "winbar", { fg = c.fg_primary, bg = c.bg_primary, bold = opts.bold_styles })
    hl(0, "winbarnc", { fg = c.fg_primary, bg = c.bg_primary })
    hl(0, "quickfixline", { bold = opts.bold_styles })

    -- treesitter
    hl(0, "@error", { fg = c.error_red, bg = "none" })
    hl(0, "@punctuation.bracket", { fg = c.fg_bracket, bg = "none", bold = opts.bold_styles })
    hl(0, "@punctuation.special", { fg = c.fg_bracket, bg = "none", bold = opts.bold_styles })
    hl(0, "@punctuation.delimiter", { fg = c.fg_bracket, bg = "none", bold = opts.bold_styles })
    hl(0, "@comment", { fg = c.green, bg = "none", italic = opts.italic_comments })
    hl(0, "@comment.note", { fg = c.mint, bg = "none", bold = opts.bold_styles, italic = opts.italic_comments })
    hl(0, "@comment.warning", { fg = c.orange, bg = "none", bold = opts.bold_styles, italic = opts.italic_comments })
    hl(0, "@comment.error", { fg = c.error_red, bg = "none", bold = opts.bold_styles, italic = opts.italic_comments })
    hl(0, "@constant", { fg = c.fg_primary, bg = "none" })
    hl(
        0,
        "@constant.builtin",
        { fg = c.fg_primary, bg = "none", bold = opts.bold_styles, italic = opts.italic_comments }
    )
    hl(0, "@constant.macro", { fg = c.fg_primary, bg = "none" })
    hl(0, "@string.regexp", { fg = c.red, bg = "none" })
    hl(0, "@string", { fg = c.red, bg = "none" })
    hl(0, "@string.documentation", { fg = c.red, bg = "none" })
    hl(0, "@string.regexp", { fg = c.red, bg = "none" })
    hl(0, "@string.escape", { fg = c.red, bg = "none" })
    hl(0, "@string.special", { fg = c.red, bg = "none" })
    hl(0, "@string.special.symbol", { fg = c.red, bg = "none" })
    hl(0, "@string.special.path", { fg = c.red, bg = "none", underline = opts.underline_links })
    hl(0, "@string.special.url", { fg = c.red, bg = "none", underline = opts.underline_links })
    hl(0, "@character", { fg = c.red, bg = "none" })
    hl(0, "@character.special", { fg = c.blue, bg = "none" })
    hl(0, "@number", { fg = c.blue, bg = "none" })
    hl(0, "@number.float", { fg = c.blue, bg = "none" })
    hl(0, "@boolean", { fg = c.mint, bg = "none" })
    hl(0, "@annotation", { fg = c.mint, bg = "none", bold = opts.bold_styles })
    hl(0, "@attribute", { fg = c.mint, bg = "none", bold = opts.bold_styles })
    hl(0, "@attribute.builtin", { fg = c.mint, bg = "none" })
    hl(0, "@module", { fg = c.mint, bg = "none" })
    hl(0, "@function", { fg = c.fg_primary, bg = "none", bold = opts.bold_styles })
    hl(0, "@function.builtin", { fg = c.fg_primary, bg = "none", bold = opts.bold_styles })
    hl(0, "@function.macro", { fg = c.fg_primary, bg = "none", bold = opts.bold_styles })
    hl(0, "@function.method", { fg = c.fg_primary, bg = "none", bold = opts.bold_styles })
    hl(0, "@define", { fg = c.mint, bg = "none", bold = opts.bold_styles })
    hl(0, "@variable", { fg = c.fg_primary, bg = "none" })
    hl(0, "@variable.builtin", { fg = c.fg_primary, bg = "none", bold = opts.bold_styles })
    hl(0, "@variable.parameter", { fg = c.fg_primary, bg = "none" })
    hl(0, "@variable.parameter.reference", { fg = c.fg_primary, bg = "none" })
    hl(0, "@variable.member", { fg = c.fg_primary, bg = "none" })
    hl(0, "@property", { fg = c.fg_primary, bg = "none" })
    hl(0, "@constructor", { fg = c.mint, bg = "none", bold = opts.bold_styles })
    hl(0, "@label", { fg = c.fg_primary, bg = "none" })
    hl(0, "@keyword", { fg = c.yellow, bg = "none", bold = opts.bold_styles })
    hl(0, "@keyword.conditional", { fg = c.yellow, bg = "none", bold = opts.bold_styles })
    hl(0, "@keyword.repeat", { fg = c.yellow, bg = "none", bold = opts.bold_styles })
    hl(0, "@keyword.return", { fg = c.yellow, bg = "none", bold = opts.bold_styles })
    hl(0, "@keyword.exception", { fg = c.yellow, bg = "none", bold = opts.bold_styles })
    hl(0, "@keyword.import", { fg = c.yellow, bg = "none", bold = opts.bold_styles })
    hl(0, "@operator", { fg = c.fg_bracket, bg = "none", bold = opts.bold_styles })
    hl(0, "@type", { fg = c.mint, bg = "none", bold = opts.bold_styles })
    hl(0, "@type.qualifier", { fg = c.yellow, bg = "none", bold = opts.bold_styles })
    hl(0, "@structure", { fg = c.mint, bg = "none", bold = opts.bold_styles })
    hl(0, "@tag", { fg = "#e3ceab", bg = "none" }) -- html/xml tags
    hl(0, "@tag.builtin", { fg = "#e3ceab", bg = "none" })
    hl(0, "@tag.delimiter", { fg = c.fg_bracket, bg = "none", bold = opts.bold_styles })
    hl(0, "@tag.attribute", { fg = "#dfdfdf", bg = "none", bold = opts.bold_styles }) -- html attributes
    hl(0, "@text", { fg = c.fg_primary, bg = "none" })
    hl(0, "@markup.strong", { fg = c.blue, bold = opts.bold_styles })
    hl(0, "@markup.italic", { fg = c.fg_primary, bg = "none", italic = true })
    hl(0, "@markup.underline", { fg = c.orange, bg = "none", underline = true })
    hl(0, "@markup.strikethrough", { fg = c.fg_primary, bg = "none", strikethrough = true })
    hl(0, "@markup.heading", { fg = "#ff8040", bold = opts.bold_styles }) -- markdown headings
    hl(0, "@markup.raw", { fg = c.fg_primary, bg = "none" })
    hl(0, "@markup.raw.markdown", { fg = c.red, bg = "none" })
    hl(0, "@markup.raw.markdown_inline", { fg = c.red, bg = "none" })
    hl(0, "@markup.link.label", { fg = "#edd6ed", bg = "none", underline = opts.underline_links }) -- markdown link
    hl(0, "@markup.link.url", { fg = c.fg_primary, bg = "none", underline = opts.underline_links })
    hl(0, "@markup.list.checked", { link = "todo" })
    hl(0, "@markup.list.unchecked", { link = "todo" })
    hl(0, "@textreference", { fg = c.red })
    hl(0, "@stringescape", { fg = c.red, bold = opts.bold_styles })
    hl(0, "@diff.plus", { link = "DiffAdd" })
    hl(0, "@diff.minus", { link = "DiffDelete" })
    hl(0, "@diff.delta", { link = "DiffChange" })

    -- Git Signs
    hl(0, "GitSignsAdd", { fg = c.green, bg = "NONE" })
    hl(0, "GitSignsChange", { fg = c.orange, bg = "NONE" })
    hl(0, "GitSignsDelete", { fg = c.error_red, bg = "NONE" })
    hl(0, "GitSignsAddLn", { fg = c.bg_primary, bg = c.green })
    hl(0, "GitSignsChangeLn", { fg = c.bg_primary, bg = c.orange })
    hl(0, "GitSignsDeleteLn", { fg = c.bg_primary, bg = c.error_red })

    -- IndentBlankLine
    hl(0, "IndentBlanklineContextChar", { fg = "#4f5f5f", bg = "NONE", nocombine = true })
    hl(0, "IndentBlanklineContextStart", { sp = "#f0f9f9", bg = "NONE", nocombine = true, underline = true })
    hl(0, "IndentBlanklineChar", { fg = "#4f5f5f", bg = "NONE", nocombine = true })
    hl(0, "IndentBlanklineSpaceChar", { fg = "#4f5f5f", bg = "NONE", nocombine = true })
    hl(0, "IndentBlanklineSpaceCharBlankline", { fg = "#4f5f5f", bg = "NONE", nocombine = true })

    -- LSP
    hl(0, "@type.builtin", { fg = c.fg_primary, bg = "NONE", bold = opts.bold_styles })
    hl(0, "@lsp.typemod.type.defaultLibrary", { link = "@type.builtin" })
    hl(0, "@lsp.type.type", { link = "@type" })
    hl(0, "@lsp.type.typeParameter", { link = "@type" })
    hl(0, "@lsp.type.macro", { link = "@constant" })
    hl(0, "@lsp.type.enumMember", { link = "@constant" })
    hl(0, "@lsp.typemod.variable.readonly", { link = "@constant" })
    hl(0, "@lsp.typemod.property.readonly", { link = "@constant" })
    hl(0, "@lsp.typemod.variable.constant", { link = "@constant" })
    hl(0, "@lsp.type.member", { link = "@function" })
    hl(0, "@lsp.type.keyword", { link = "@keyword" })
    hl(0, "@lsp.typemod.keyword.controlFlow", { link = "@keyword" })
    hl(0, "@lsp.type.comment.c", { fg = c.green, bg = "NONE" })
    hl(0, "@lsp.type.comment.cpp", { fg = c.green, bg = "NONE" })
    hl(0, "@event", { link = "Identifier" })
    hl(0, "@interface", { link = "Identifier" })
    hl(0, "@modifier", { link = "Identifier" })
    hl(0, "@regexp", { fg = c.red, bg = "NONE" })
    hl(0, "@decorator", { link = "Identifier" })

    hl(0, "DiagnosticOk", { fg = c.green, bg = "NONE" })
    hl(0, "DiagnosticError", { fg = c.error_red, bg = "NONE" })
    hl(0, "DiagnosticWarn", { fg = c.warning_yellow, bg = "NONE" })
    hl(0, "DiagnosticInfo", { fg = c.blue, bg = "NONE" })
    hl(0, "DiagnosticHint", { fg = c.gray, bg = "NONE" })
    hl(0, "DiagnosticUnnecessary", { fg = c.gray, bg = "NONE" })
    hl(0, "DiagnosticUnderlineError", { fg = "NONE", bg = "NONE", undercurl = true, sp = c.error_red })
    hl(0, "DiagnosticUnderlineWarn", { fg = "NONE", bg = "NONE", undercurl = true, sp = c.warning_yellow })
    hl(0, "DiagnosticUnderlineInfo", { fg = "NONE", bg = "NONE", undercurl = true, sp = c.blue })
    hl(0, "DiagnosticUnderlineHint", { fg = "NONE", bg = "NONE", undercurl = true, sp = c.gray })
    hl(0, "LspReferenceText", { fg = "NONE", bg = c.light_gray })
    hl(0, "LspReferenceRead", { fg = "NONE", bg = c.light_gray })
    hl(0, "LspReferenceWrite", { fg = "NONE", bg = c.light_gray })

    -- Telescope
    hl(0, "TelescopeBorder", { fg = c.gray, bg = "NONE" })
    hl(0, "TelescopeSelection", { fg = c.fg_primary, bg = c.gray })
    hl(0, "TelescopeMatching", { fg = c.red, bg = "NONE", bold = opts.bold_styles })
end

return theme
